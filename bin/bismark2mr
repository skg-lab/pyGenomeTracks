# coding: utf-8

import sys
import argparse

import pandas as pd
import numpy as np
from scipy.stats import beta

parser = argparse.ArgumentParser(description='make .mr file from bismark.cov')
parser.add_argument('bismark', help='bismark.cov')
parser.add_argument('output', help='output file')
parser.add_argument('--window', type=int,
                    help='window size (bp)', default=2000)
parser.add_argument('--step', type=int,
                    help='step (slide) size (bp)', default=400)

args = parser.parse_args()

input_bismark_file = args.bismark
# input_bed_file =sys.argv[2]
file_output = args.output
window = args.window
slide = args.step

list_chr = ['chr1', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19',
            'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chrM', 'chrX', 'chrY']

df_bismark = pd.read_csv(input_bismark_file, sep='\t', names=(
    'chr', 'start', 'end', 'methyl_per', 'methyl', 'de_methyl'))
list_chr = [c for c in list_chr if c in set(df_bismark.chr)]

drop_row = ['end', 'methyl_per']
df_bismark_drop = df_bismark.drop(drop_row, axis=1)

list_df_bed = []
list_df_bismark = []

for i, c in enumerate(list_chr):
    df_bismark_chr = df_bismark_drop[df_bismark_drop['chr'] == list_chr[i]]
    bed = pd.DataFrame(np.arange(int(df_bismark_chr.start.min(
    ) / slide), int(df_bismark_chr.start.max() / slide) + 1) * slide)
    bed.columns = ['start']
    bed['end'] = bed['start'] + window
    bed['chr'] = c
    bed = bed[['chr', 'start', 'end']]
    bed_list = bed.values.tolist()

    for j in range(len(bed_list)):
        x = bed_list[j][1]
        y = bed_list[j][2]

        bismark_query = df_bismark_chr.query(
            "@x<= start<=@y", engine='numexpr')
        bed_list[j].append(bismark_query['methyl'].sum())
        bed_list[j].append(bismark_query['de_methyl'].sum())

    tag_bed = pd.DataFrame(bed_list, columns=(
        'chr', 'start', 'end', 'methyl_sum', 'de_methyl_sum'))
    tag_bed['per_methyl'] = (tag_bed['methyl_sum']+1) / \
        (tag_bed['methyl_sum']+tag_bed['de_methyl_sum']+2)
    tag_bed['low'] = beta.ppf(
        0.05, tag_bed['methyl_sum']+1, tag_bed['de_methyl_sum']+1)
    tag_bed['ratio'] = beta.ppf(
        0.5, tag_bed['methyl_sum']+1, tag_bed['de_methyl_sum']+1)
    tag_bed['high'] = beta.ppf(
        0.95, tag_bed['methyl_sum']+1, tag_bed['de_methyl_sum']+1)

    tag_bed.to_csv(file_output, mode='a', sep='\t', index=False, header=False)
